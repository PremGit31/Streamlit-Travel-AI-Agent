# -*- coding: utf-8 -*-
"""FinalTravelAgentAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_BPwMVvLj6f3_rK6P_Om4cwgWFaUGiMV
"""

# !pip install streamlit langchain google-generativeai requests pandas

# !pip install pyngrok

# !pip install langchain_community

# !pip install langchain_google_genai

# Commented out IPython magic to ensure Python compatibility.
# %%writefile AITrevelAgent.py
import streamlit as st
import os
from datetime import datetime, date
import requests
import json
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import initialize_agent, Tool, AgentType
from langchain.memory import ConversationBufferMemory
from langchain.schema import SystemMessage
from langchain.prompts import PromptTemplate
import pandas as pd

# Page configuration
st.set_page_config(
    page_title="üåç Travel AI Agent",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for attractive UI
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        padding: 1rem 0;
    }

    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .block-container {
        background: white;
        border-radius: 10px;
        margin-top: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .travel-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin: 0.5rem;
    }

    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .sidebar .stSelectbox, .sidebar .stDateInput, .sidebar .stNumberInput {
        background: white;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# API Keys - Replace with your actual API keys
GEMINI_API_KEY = "AIzaSyAJ_YVwyDhI9oTkCjAzUTYHxSjS6Sn0VWo"
SERP_API_KEY = "8952b132f6dddffa2d3e229dcd1566fea13dddbe95c238ab9b7e1bbae9bb8c38"
TAVILY_API_KEY = "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"
WEATHER_API_KEY = "6f64d6a2dd1646fd96c35709251304"

# Initialize session state
if 'travel_plan' not in st.session_state:
    st.session_state.travel_plan = None
if 'travel_agent' not in st.session_state:
    st.session_state.travel_agent = None

class TravelAgent:
    def __init__(self, gemini_api_key, serp_api_key, tavily_api_key, weather_api_key):
        self.gemini_api_key = gemini_api_key
        self.serp_api_key = serp_api_key
        self.tavily_api_key = tavily_api_key
        self.weather_api_key = weather_api_key

        # Initialize Gemini LLM
        self.llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            google_api_key=gemini_api_key,
            temperature=0.7
        )

        # Initialize memory
        self.memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True
        )

        # Initialize tools
        self.tools = self._create_tools()

        # Initialize agent
        self.agent = initialize_agent(
            tools=self.tools,
            llm=self.llm,
            agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
            memory=self.memory,
            verbose=True,
            handle_parsing_errors=True
        )

    def _create_tools(self):
        return [
            Tool(
                name="flight_search",
                description="Search for flights between cities. Input should be 'source_city destination_city departure_date'",
                func=self._search_flights
            ),
            Tool(
                name="hotel_search",
                description="Search for hotels in a destination city. Input should be 'city_name number_of_travelers check_in_date'",
                func=self._search_hotels
            ),
            Tool(
                name="weather_check",
                description="Get weather information for a city. Input should be 'city_name'",
                func=self._get_weather
            ),
            Tool(
                name="attraction_search",
                description="Search for tourist attractions and activities in a city. Input should be 'city_name'",
                func=self._search_attractions
            )
        ]

    def _search_flights(self, query):
        """Search for flights using SerpApi"""
        try:
            parts = query.split()
            if len(parts) < 3:
                return "Please provide source city, destination city, and departure date"

            source = parts[0]
            destination = parts[1]
            date = parts[2] if len(parts) > 2 else ""

            params = {
                "engine": "google_flights",
                "departure_id": source,
                "arrival_id": destination,
                "outbound_date": date,
                "currency": "USD",
                "api_key": self.serp_api_key
            }

            try:
                response = requests.get("https://serpapi.com/search", params=params)
                data = response.json()

                if "best_flights" in data:
                    flights = []
                    for flight in data["best_flights"][:5]:  # Get top 5 flights
                        flight_info = {
                            "airline": flight.get("flights", [{}])[0].get("airline", "Unknown"),
                            "price": flight.get("price", "N/A"),
                            "duration": flight.get("total_duration", "N/A"),
                            "departure": flight.get("flights", [{}])[0].get("departure_airport", {}).get("time", "N/A"),
                            "arrival": flight.get("flights", [{}])[0].get("arrival_airport", {}).get("time", "N/A")
                        }
                        flights.append(flight_info)

                    return f"‚úàÔ∏è Flights from {source} to {destination}:\n" + "\n".join([
                        f"‚Ä¢ {f['airline']}: {f['price']} ({f['duration']}) - Dep: {f['departure']}, Arr: {f['arrival']}"
                        for f in flights
                    ])
                else:
                    return f"No flights found from {source} to {destination} for {date}"

            except requests.RequestException:
                # Fallback to sample data if API fails
                return f"‚úàÔ∏è Sample flights from {source} to {destination}:\n‚Ä¢ IndiGo: $299 (2h 30m)\n‚Ä¢ SpiceJet: $320 (2h 45m)\n‚Ä¢ Air India: $280 (2h 20m)"

        except Exception as e:
            return f"Error searching flights: {str(e)}"

    def _search_hotels(self, query):
        """Search for hotels using SerpApi"""
        try:
            parts = query.split()
            city = parts[0]
            travelers = parts[1] if len(parts) > 1 else "2"
            checkin = parts[2] if len(parts) > 2 else ""

            params = {
                "engine": "google_hotels",
                "q": f"hotels in {city}",
                "check_in_date": checkin,
                "adults": travelers,
                "currency": "USD",
                "api_key": self.serp_api_key
            }

            try:
                response = requests.get("https://serpapi.com/search", params=params)
                data = response.json()

                if "properties" in data:
                    hotels = []
                    for hotel in data["properties"][:5]:  # Get top 5 hotels
                        hotel_info = {
                            "name": hotel.get("name", "Unknown Hotel"),
                            "rating": hotel.get("overall_rating", "N/A"),
                            "price": hotel.get("rate_per_night", {}).get("lowest", "N/A"),
                            "amenities": hotel.get("amenities", [])[:3]  # First 3 amenities
                        }
                        hotels.append(hotel_info)

                    return f"üè® Hotels in {city} for {travelers} travelers:\n" + "\n".join([
                        f"‚Ä¢ {h['name']}: {h['price']}/night (‚≠ê{h['rating']}) - {', '.join(h['amenities'])}"
                        for h in hotels
                    ])
                else:
                    return f"No hotels found in {city}"

            except requests.RequestException:
                # Fallback to sample data if API fails
                return f"üè® Sample hotels in {city}:\n‚Ä¢ Grand Hotel: $120/night (‚≠ê4.5)\n‚Ä¢ City Center Inn: $89/night (‚≠ê4.2)\n‚Ä¢ Luxury Resort: $280/night (‚≠ê4.8)"

        except Exception as e:
            return f"Error searching hotels: {str(e)}"

    def _get_weather(self, city):
        """Get weather information using WeatherApi"""
        try:
            url = f"http://api.weatherapi.com/v1/forecast.json?key={self.weather_api_key}&q={city}&days=7&aqi=no&alerts=no"

            try:
                response = requests.get(url)
                data = response.json()

                if "current" in data and "forecast" in data:
                    current = data["current"]
                    forecast = data["forecast"]["forecastday"]

                    weather_info = f"üå§Ô∏è Weather in {city}:\n"
                    weather_info += f"Current: {current['temp_c']}¬∞C, {current['condition']['text']}, Humidity: {current['humidity']}%\n\n"
                    weather_info += "7-Day Forecast:\n"

                    for day in forecast:
                        date = day["date"]
                        max_temp = day["day"]["maxtemp_c"]
                        min_temp = day["day"]["mintemp_c"]
                        condition = day["day"]["condition"]["text"]
                        weather_info += f"‚Ä¢ {date}: {max_temp}¬∞C/{min_temp}¬∞C - {condition}\n"

                    return weather_info
                else:
                    return f"Weather data not available for {city}"

            except requests.RequestException:
                # Fallback to sample data if API fails
                return f"üå§Ô∏è Sample weather for {city}:\nCurrent: 28¬∞C, Sunny, Humidity: 65%\nForecast: Partly cloudy with temperatures 24-32¬∞C"

        except Exception as e:
            return f"Error getting weather: {str(e)}"

    def _search_attractions(self, city):
        """Search for attractions using TavilyApi"""
        try:
            headers = {
                "Content-Type": "application/json"
            }

            payload = {
                "api_key": self.tavily_api_key,
                "query": f"top tourist attractions things to do in {city}",
                "search_depth": "basic",
                "include_answer": True,
                "include_domains": ["tripadvisor.com", "lonelyplanet.com", "timeout.com"],
                "max_results": 5
            }

            try:
                response = requests.post("https://api.tavily.com/search", json=payload, headers=headers)
                data = response.json()

                if "results" in data and data["results"]:
                    attractions_info = f"üé™ Top attractions in {city}:\n"

                    for i, result in enumerate(data["results"][:5], 1):
                        title = result.get("title", "Unknown Attraction")
                        snippet = result.get("content", "No description available")[:100] + "..."
                        attractions_info += f"{i}. {title}\n   {snippet}\n\n"

                    if "answer" in data:
                        attractions_info += f"\nSummary: {data['answer'][:200]}..."

                    return attractions_info
                else:
                    return f"No attractions found for {city}"

            except requests.RequestException:
                # Fallback to sample data if API fails
                return f"üé™ Sample attractions in {city}:\n‚Ä¢ Historic Fort: Ancient fort with stunning architecture\n‚Ä¢ Art Museum: Modern art collections and exhibitions\n‚Ä¢ City Park: Beautiful park perfect for relaxation"

        except Exception as e:
            return f"Error searching attractions: {str(e)}"

    def create_itinerary(self, source, destination, departure_date, return_date, travelers, budget, preferences):
        """Create a comprehensive travel itinerary"""
        prompt = f"""
        Create a detailed and attractive travel itinerary for:
        - From: {source}
        - To: {destination}
        - Departure: {departure_date}
        - Return: {return_date}
        - Travelers: {travelers}
        - Budget: ${budget}
        - Preferences: {preferences}

        Please include:
        1. Flight recommendations
        2. Hotel suggestions
        3. Weather forecast
        4. Daily itinerary with attractions
        5. Local food recommendations
        6. Transportation tips
        7. Budget breakdown

        Make it engaging and personalized based on the preferences provided.
        """

        try:
            response = self.agent.run(prompt)
            return response
        except Exception as e:
            return f"Error creating itinerary: {str(e)}"

def main():
    # Header
    st.markdown('<h1 class="main-header">üåç Travel AI Agent ‚úàÔ∏è</h1>', unsafe_allow_html=True)
    st.markdown('<div class="travel-card"><h3>Your Personal AI Travel Planner</h3><p>Discover amazing destinations, find the best flights and hotels, check weather conditions, and get personalized itineraries powered by AI!</p></div>', unsafe_allow_html=True)

    # Sidebar for quick stats (removed API key inputs)
    with st.sidebar:
        st.header("üìä Quick Stats")
        st.markdown('<div class="metric-card"><h4>üåü</h4><p>AI-Powered Planning</p></div>', unsafe_allow_html=True)
        st.markdown('<div class="metric-card"><h4>üîç</h4><p>Real-time Search</p></div>', unsafe_allow_html=True)
        st.markdown('<div class="metric-card"><h4>‚ö°</h4><p>Instant Results</p></div>', unsafe_allow_html=True)

        st.markdown("---")
        st.markdown("### üéØ Features")
        st.markdown("‚úÖ Flight Search")
        st.markdown("‚úÖ Hotel Finder")
        st.markdown("‚úÖ Weather Forecast")
        st.markdown("‚úÖ Attraction Guide")
        st.markdown("‚úÖ AI Itinerary")

    # Initialize travel agent if not already done
    if st.session_state.travel_agent is None:
        st.session_state.travel_agent = TravelAgent(
            GEMINI_API_KEY, SERP_API_KEY, TAVILY_API_KEY, WEATHER_API_KEY
        )

    # Main content
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("‚úàÔ∏è Plan Your Trip")

        # Trip details form
        with st.form("trip_form"):
            col_a, col_b = st.columns(2)

            with col_a:
                source_city = st.text_input("üìç From", placeholder="Enter departure city")
                departure_date = st.date_input("üìÖ Departure Date", min_value=date.today())
                travelers = st.number_input("üë• Number of Travelers", min_value=1, max_value=10, value=2)

            with col_b:
                destination_city = st.text_input("üèõÔ∏è To", placeholder="Enter destination city")
                return_date = st.date_input("üìÖ Return Date", min_value=date.today())
                budget = st.number_input("üí∞ Budget (USD)", min_value=100, value=1000)

            preferences = st.text_area("üéØ Travel Preferences",
                                     placeholder="E.g., adventure activities, cultural sites, food tours, relaxation...")

            submit_button = st.form_submit_button("üöÄ Create My Itinerary", use_container_width=True)

        if submit_button and source_city and destination_city:
            with st.spinner("ü§ñ Creating your personalized travel plan..."):
                try:
                    itinerary = st.session_state.travel_agent.create_itinerary(
                        source_city, destination_city, departure_date, return_date,
                        travelers, budget, preferences
                    )
                    st.session_state.travel_plan = itinerary
                except Exception as e:
                    st.error(f"Error creating itinerary: {str(e)}")

    with col2:
        st.header("üéØ Quick Actions")

        # Quick action buttons
        if st.button("üå§Ô∏è Check Weather", use_container_width=True):
            if destination_city:
                with st.spinner("Getting weather data..."):
                    weather_info = st.session_state.travel_agent._get_weather(destination_city)
                    st.info(weather_info)
            else:
                st.warning("Please enter a destination city first!")

        if st.button("‚úàÔ∏è Find Flights", use_container_width=True):
            if source_city and destination_city:
                with st.spinner("Searching flights..."):
                    flight_info = st.session_state.travel_agent._search_flights(
                        f"{source_city} {destination_city} {departure_date}"
                    )
                    st.info(flight_info)
            else:
                st.warning("Please enter both source and destination cities!")

        if st.button("üè® Find Hotels", use_container_width=True):
            if destination_city:
                with st.spinner("Searching hotels..."):
                    hotel_info = st.session_state.travel_agent._search_hotels(
                        f"{destination_city} {travelers} {departure_date}"
                    )
                    st.info(hotel_info)
            else:
                st.warning("Please enter a destination city first!")

        if st.button("üé™ Find Attractions", use_container_width=True):
            if destination_city:
                with st.spinner("Finding attractions..."):
                    attraction_info = st.session_state.travel_agent._search_attractions(destination_city)
                    st.info(attraction_info)
            else:
                st.warning("Please enter a destination city first!")

    # Display travel plan
    if st.session_state.travel_plan:
        st.header("üó∫Ô∏è Your Personalized Travel Itinerary")
        st.markdown(f'<div class="travel-card">{st.session_state.travel_plan}</div>', unsafe_allow_html=True)

        # Download button for itinerary
        if st.button("üì• Download Itinerary", use_container_width=True):
            st.download_button(
                label="üíæ Download as Text File",
                data=st.session_state.travel_plan,
                file_name=f"travel_itinerary_{destination_city}_{departure_date}.txt",
                mime="text/plain"
            )

    # Footer
    st.markdown("---")
    st.markdown("### ü§ù About Travel AI Agent")
    st.markdown("""
    This AI-powered travel assistant helps you plan the perfect trip by:
    - üîç Finding the best flights and hotels
    - üå§Ô∏è Providing real-time weather updates
    - üéØ Creating personalized itineraries
    - üí° Suggesting local attractions and activities
    - üí∞ Optimizing your travel budget
    """)

if __name__ == "__main__":
    main()



# !streamlit run AITrevelAgent.py --server.port=8989 &>./logs.txt &

from google.colab import userdata

from pyngrok import ngrok

#Terminate possibly existing tunnels
ngrok.kill()

ngrok.set_auth_token(userdata.get("Ngrokapi"))

# Open an HTTPs tunnel on port XXXX which you get from your `logs.txt` file
ngrokTunnel = ngrok.connect(8989)
print("Streamlit App: "+ngrokTunnel.public_url)